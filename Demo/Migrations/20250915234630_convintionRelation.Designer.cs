// <auto-generated />
using System;
using Demo.DataDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Demo.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20250915234630_convintionRelation")]
    partial class convintionRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Demo.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Demo.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"), 10L, 10);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("hh@mm.com")
                        .HasAnnotation("DataType", "EmailAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("EmployeeName");

                    b.Property<decimal>("Sallary")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DataType", "Password");

                    b.HasKey("EmpId");

                    b.ToTable("employees", t =>
                        {
                            t.HasCheckConstraint("Check_Age_Range", "[Age] Not in (30,35,25)");

                            t.HasCheckConstraint("Check_Allowed_Ages", "[Age] in (24,29,28)");

                            t.HasCheckConstraint("Check_Employee_Email", "[Email] like '%@%.%'");
                        });
                });

            modelBuilder.Entity("Demo.Models.Department", b =>
                {
                    b.HasOne("Demo.Models.Employee", "Manager")
                        .WithOne("Department")
                        .HasForeignKey("Demo.Models.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Demo.Models.Employee", b =>
                {
                    b.Navigation("Department")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
